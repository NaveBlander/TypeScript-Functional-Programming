#lang racket/base

(define append
    (lambda (l1 l2)
        (if (eq? l1 '())
            l2
            (cons (car l1) (append (cdr l1) l2) 
))))


(define reverse
    (lambda (l)
        (if (eq? l '())
            '()                                ; Base case: return empty list if l is empty
            (append (reverse (cdr l))          ; Reverse the rest of the list
                    (list (car l))))))         ; Append the first element to the reversed list


(define duplicate-items
  (lambda (lst dup-count)

    (define duplicate 
      (lambda (dupNum dupCount lst)
        (if (eq? dupCount 0)
            lst
            (duplicate dupNum (- dupCount 1) (append lst (cons dupNum '()))))))

    (define lengthOfLst
      (lambda (lst counter)
        (if (eq? lst '())
            counter
            (lengthOfLst (cdr lst) (+ counter 1)))))

    (define newDupCount                                        
      (lambda (dupl len1 len2)
        (if (> len2 len1)
            dupl
            (if (= len2 len1)
                dupl
                (newDupCount (append dupl dupl) len1 (+ len2 len2))))))

    (define apply-duplicates 
      (lambda (lst dup-count)
        (if (eq? lst '())
            '()
            (append (duplicate (car lst) (car dup-count) '())
                    (apply-duplicates (cdr lst) (cdr dup-count))))))

    (apply-duplicates lst 
                      (newDupCount dup-count 
                                   (lengthOfLst lst 0) 
                                   (lengthOfLst dup-count 0)))))